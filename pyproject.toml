[build-system]
requires = ["hatchling>=1.25.0,<2"]
build-backend = "hatchling.build"

# See more keys and their definitions at https://packaging.python.org/en/latest/specifications/declaring-project-metadata/

[project]
name = "visoma"
version = "0.1.0"
description = "A CLI utility and Python library for interacting with Visoma"
authors = [{ name = "Andreas Longo", email="contact@andreaslongo.com" }]
classifiers = ["Private :: Do Not Upload"]
requires-python = ">=3.12.5,<4"
dependencies = [
    "attrs >=24.2.0,<25",
    "cattrs >=24.1.1,<25",
    "fire >=0.6.0,<0.7",
    "httpx >=0.27.2,<0.28",
]

[project.scripts]
visoma = "visoma.__cli__:main"

# See more keys and their definitions at https://pixi.sh/latest/reference/project_configuration/

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64"]

# NOTE: All environments implicitly add the default feature.
# To disable this set: no-default-feature = true.
[tool.pixi.environments]
# The default environment is DEV and has features for running in development,
# testing and building.
default = { solve-group = "default-group", features = ["dev", "build", "lint", "test"] }
# A leaner PROD environment for use in production.
prod = { solve-group = "default-group", features = ["prod"] }


# Implicit default feature.
# Pixi throws an error if we name it explicitly, so we comment it out here.
# [tool.pixi.feature.default]
[tool.pixi.dependencies]
python = ">=3.12.5,<4"
attrs = ">=24.2.0,<25"
cattrs = ">=24.1.1,<25"
fire = ">=0.6.0,<0.7"
httpx = ">=0.27.2,<0.28"


[tool.pixi.feature.dev]
[tool.pixi.feature.dev.tasks]
dev = { depends-on = ["fmt", "git-hooks", "lint", "test"] }
clean = "rm -rf .coverage .pytest_cache/ .ruff_cache/ htmlcov/ dist/ **/__pycache__/"
# Initialize a local DEV environment.
[tool.pixi.feature.dev.pypi-dependencies]
# Built editable in development mode
visoma = { path = ".", editable = true }


[tool.pixi.feature.prod]
[tool.pixi.feature.prod.tasks]
# Install into the production environment
install = "pip install --no-deps --no-cache-dir --disable-pip-version-check --force-reinstall dist/visoma-*.whl"
start = "python -m visoma"
cli = "visoma"
# Used for installing into production, as a post-process step.
# TODO: Make better integration for this in the future.
[tool.pixi.feature.prod.host-dependencies]
pip = "*"


[tool.pixi.feature.build]
# Builds the package.
[tool.pixi.feature.build.tasks]
# Create a wheel for installation
build = "python -m build --no-isolation --wheel ."
# We use dependencies from conda to use it to build the wheel
[tool.pixi.feature.build.dependencies]
python-build = "*"
hatchling = ">=1.25.0,<2"


[tool.pixi.feature.lint]
# Checks a package to catch common mistakes and improve your Python code.
# Formats all Python files of the local package using ruff.
[tool.pixi.feature.lint.tasks]
fmt = "ruff format ."
fmt-diff = "ruff format --diff ."
lint = "ruff check ."
git-hooks = "pre-commit run --all"
git-hooks-update = "pre-commit autoupdate --freeze"
[tool.pixi.feature.lint.dependencies]
git = "*"  # required for running git hooks via pre-commit
pre-commit = "*"
ruff = "*"
[tool.ruff.lint]
select = ["E", "F", "B"]  # Enable flake8-bugbear (`B`) rules.
ignore = ["E501"]         # Never enforce `E501` (line length violations).
unfixable = ["B"]         # Avoid trying to fix flake8-bugbear (`B`) violations.


[tool.pixi.feature.test]
[tool.pixi.feature.test.tasks]
test = "pytest"
# For pytest-recording. This also shows how to disable some logs in the pytest output.
# test-record = "pytest --record-mode=once --log-disable=vcr.cassette --log-disable=vcr.matchers --log-disable=vcr.request --log-disable=httpx"
[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
# https://hypothesis.readthedocs.io/en/latest/
# hypothesis = "*"
# https://github.com/lundberg/respx
respx = "*"
# https://github.com/kiwicom/pytest-recording
# pytest-recording = "*"
[tool.pytest.ini_options]
addopts = "-m 'not slow' --import-mode=importlib --cov=src --cov=tests --cov-report=term-missing --cov-branch"
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
# log_cli = true
# log_cli_level = "DEBUG"
# log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s %(message)s (%(filename)s:%(lineno)s)"
# log_cli_date_format = "%Y-%m-%d %H:%M:%S"
# log_file = "pytest.log"
# log_file_level = "DEBUG"
# log_file_format = "%(asctime)s [%(levelname)8s] %(name)s %(message)s (%(filename)s:%(lineno)s)"
# log_file_date_format = "%Y-%m-%d %H:%M:%S"
